package com.example.wrap.mydemo.DesignMode.E_agentMode;

/**
 * 代理模式：为其他对象提供一种代理以控制对这个对象的访问（其实代理是对象的真实代表）
 *
 * 几种代理模式：
 * 1.远程代理：为一个对象在不同的地址空间提供局部代表（在应用程序的项目中加入Web引用，引用WebService，会在项目中生成一个
 *          WebReference的文件夹和一些文件，这些就是代理，使得客户端程序调用代理可以解决远程访问的问题）
 * 2.虚拟代理：根据需要创建开销很大的对象，通过它来存放实例化需要很长时间的真实对象
 *            （打开HTML网页，先出文字再加载图片。未打开的图片框，通过虚拟代理代替真实图片）
 * 3.安全代理：用来控制真实对象访问时的权限（一般用于对象应该有不同的访问权限）
 * 4.智能指引：当调用真实对象时，代理处理另外一些事情（计算真实对象的引用次数，当该对象没有引用时，可以自动释放，
 *             即通过代理在访问一个对象时附加一些内务处理）
 */
public class Demo {

    public static void main(String[] args){

        //被追求对象
        Gril gril = new Gril("jiaojiao");
        //实例化代理人
        Agent agent = new Agent(gril);
        //代理人送礼物---里面的实现实质是追求者送礼物
        agent.sendFlower();
        agent.sendChocolates();
    }

    /**
     * 此时的代码中只有代理人和被追求人，但是礼物实际是追求人送的
     * 这里成功用代理人将追求者和被追求者分开，达到要实现的效果
     */
}
